# bot.py
import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 2107059658

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤
questions = {}  # {user_id: str –∏–ª–∏ {question: str, admin_ready: True}}

# --- –ú–µ–Ω—é ---
def get_menu(user_id: int):
    if user_id == ADMIN_ID:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")], [KeyboardButton(text="üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã")]],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã")],
                [KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            ],
            resize_keyboard=True
        )

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üé≠ –ê–¥–º–∏–Ω–∫–∞" if message.from_user.id == ADMIN_ID else "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        reply_markup=get_menu(message.from_user.id)
    )

@dp.message(F.text.in_({"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã"}))
async def info(message: types.Message):
    txt = "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: https://usupovo-life-hall.onrender.com/" if "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in message.text else "üéüÔ∏è –ë–∏–ª–µ—Ç—ã: https://usupovo-life-hall.onrender.com/"
    await message.answer(txt)

@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

# --- –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
@dp.message(F.text)
async def handle_all_text(message: types.Message):
    user = message.from_user
    text = message.text

    # === –°–ª—É—á–∞–π 1: —ç—Ç–æ –∞–¥–º–∏–Ω, –∏ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ===
    if user.id == ADMIN_ID:
        # –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–∂–∏–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç–∞
        for target_id, data in questions.items():
            if isinstance(data, dict) and data.get("admin_ready_to_reply"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                try:
                    await bot.send_message(
                        target_id,
                        f"üì¨ **–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Usupovo Life Hall:**\n\n{text}",
                        parse_mode="Markdown"
                    )
                    del questions[target_id]
                    await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {target_id})!")
                    logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {target_id} <- '{text}'")
                    return
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
                    del questions[target_id]
                    return

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logging.info(f"–ê–¥–º–∏–Ω –Ω–∞–ø–∏—Å–∞–ª (–Ω–µ –æ—Ç–≤–µ—Ç): {text}")
        return

    # === –°–ª—É—á–∞–π 2: –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ===
    if text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
    questions[user.id] = text
    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    username = f"@{user.username}" if user.username else f"ID{user.id}"
    full_name = user.full_name or "‚Äî"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"ans_{user.id}")]
    ])
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!\nüë§ {username} ({full_name})\nüÜî {user.id}\n\n{text}",
        reply_markup=kb
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" ---
@dp.callback_query(F.data.startswith("ans_"))
async def answer_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        target_id = int(callback.data.split("_")[1])
    except:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
        return

    if target_id not in questions:
        await callback.message.edit_text("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω.")
        return

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å
    questions[target_id] = {
        "question": questions[target_id],
        "admin_ready_to_reply": True
    }
    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {target_id}):")
    await callback.answer()

WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8000))  # Render –¥–∞—ë—Ç PORT
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
BASE_WEBHOOK_URL = "https://–≤–∞—à-—Ä–µ–Ω–¥–µ—Ä-–∞–¥—Ä–µ—Å.onrender.com"  # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –ø–æ–∑–∂–µ

async def on_startup(bot: Bot) -> None:
    await bot.set_webhook(f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}")

def main() -> None:
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    
    # ... –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–∞—à–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
    dp.message.register(start, Command("start"))
    dp.message.register(handle_all_text, F.text)
    dp.callback_query.register(answer_callback, F.data.startswith("ans_"))
    # ... –∏ —Ç.–¥.

    dp.startup.register(on_startup)
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)

if __name__ == "__main__":
    main()